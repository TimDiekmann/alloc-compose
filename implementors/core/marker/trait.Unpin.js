(function() {var implementors = {};
implementors["alloc_compose"] = [{"text":"impl&lt;A, const SIZE:&nbsp;usize&gt; Unpin for Chunk&lt;A, SIZE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Null","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; Unpin for Proxy&lt;A, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for RawRegion","synthetic":true,"types":[]},{"text":"impl Unpin for RawSharedRegion","synthetic":true,"types":[]},{"text":"impl Unpin for RawIntrusiveRegion","synthetic":true,"types":[]},{"text":"impl&lt;'mem&gt; Unpin for Region&lt;'mem&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'mem&gt; Unpin for SharedRegion&lt;'mem&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'mem&gt; Unpin for IntrusiveRegion&lt;'mem&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Counter","synthetic":true,"types":[]},{"text":"impl Unpin for AtomicCounter","synthetic":true,"types":[]},{"text":"impl Unpin for AllocInitFilter","synthetic":true,"types":[]},{"text":"impl Unpin for ReallocPlacementFilter","synthetic":true,"types":[]},{"text":"impl Unpin for ResultFilter","synthetic":true,"types":[]},{"text":"impl Unpin for FilteredCounter","synthetic":true,"types":[]},{"text":"impl Unpin for FilteredAtomicCounter","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()