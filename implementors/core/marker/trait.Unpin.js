(function() {var implementors = {};
implementors["alloc_compose"] = [{"text":"impl&lt;const SIZE:&nbsp;usize, A&gt; Unpin for Chunk&lt;A, SIZE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Primary, Secondary&gt; Unpin for Fallback&lt;Primary, Secondary&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Primary: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Secondary: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Null","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; Unpin for Proxy&lt;A, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Region&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;const THRESHOLD:&nbsp;usize, Small, Large&gt; Unpin for Segregate&lt;Small, Large, THRESHOLD&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Large: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Small: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Counter","synthetic":true,"types":[]},{"text":"impl Unpin for AtomicCounter","synthetic":true,"types":[]},{"text":"impl Unpin for FilteredCounter","synthetic":true,"types":[]},{"text":"impl Unpin for FilteredAtomicCounter","synthetic":true,"types":[]},{"text":"impl Unpin for AllocInitFilter","synthetic":true,"types":[]},{"text":"impl Unpin for ReallocPlacementFilter","synthetic":true,"types":[]},{"text":"impl Unpin for ResultFilter","synthetic":true,"types":[]},{"text":"impl&lt;Alloc:&nbsp;Unpin, Prefix, Suffix&gt; Unpin for Affix&lt;Alloc, Prefix, Suffix&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()