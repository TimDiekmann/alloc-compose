var searchIndex = JSON.parse('{\
"alloc_compose":{"doc":"Test Status Lint Status Docs master Docs.rs Crates.io…","i":[[3,"FallbackAlloc","alloc_compose","An allocator equivalent of an \\\"or\\\" operator in algebra.",null,null],[12,"primary","","The primary allocator",0,null],[12,"fallback","","The fallback allocator",0,null],[3,"NullAlloc","","An emphatically empty implementation of `AllocRef`.",null,null],[3,"Proxy","","Calls the provided callbacks when invoking methods on…",null,null],[12,"alloc","","",1,null],[12,"callbacks","","",1,null],[3,"Region","","Allocator over an user-defined region of memory.",null,null],[3,"SegregateAlloc","","Dispatches calls to `AllocRef` between two allocators…",null,null],[12,"small","","",2,null],[12,"large","","",2,null],[11,"new","","",3,[[]]],[11,"capacity","","Returns the total capacity available in this allocator.",3,[[]]],[11,"capacity_left","","Returns the free capacity left for allocating.",3,[[]]],[11,"reset","","Resets the allocator.",3,[[]]],[11,"is_last_block","","Checks if `memory` is the latest block, which was…",3,[[["memoryblock",3]]]],[0,"stats","","Structures to collect allocator statistics.",null,null],[3,"Counter","alloc_compose::stats","A primitive counter for collectiong statistics.",null,null],[3,"AtomicCounter","","An atomic counter for collectiong statistics which can be…",null,null],[3,"FilteredCounter","","A counter for collectiong and filtering statistics.",null,null],[3,"FilteredAtomicCounter","","An atomic counter for collectiong and filtering statistics…",null,null],[4,"AllocInitFilter","","",null,null],[13,"None","","",4,null],[13,"Uninitialized","","",4,null],[13,"Zeroed","","",4,null],[4,"ReallocPlacementFilter","","",null,null],[13,"None","","",5,null],[13,"MayMove","","",5,null],[13,"InPlace","","",5,null],[4,"ResultFilter","","",null,null],[13,"None","","",6,null],[13,"Ok","","",6,null],[13,"Err","","",6,null],[11,"num_allocs","","Returns the number of `alloc` calls.",7,[[]]],[11,"num_deallocs","","Returns the number of `dealloc` calls.",7,[[]]],[11,"num_grows","","Returns the number of `grow` calls.",7,[[]]],[11,"num_shrinks","","Returns the number of `shrink` calls.",7,[[]]],[11,"num_owns","","Returns the number of `owns` calls.",7,[[]]],[11,"num_allocs","","Returns the number of `alloc` calls.",8,[[]]],[11,"num_deallocs","","Returns the number of `dealloc` calls.",8,[[]]],[11,"num_grows","","Returns the number of `grow` calls.",8,[[]]],[11,"num_shrinks","","Returns the number of `shrink` calls.",8,[[]]],[11,"num_owns","","Returns the number of `owns` calls.",8,[[]]],[11,"num_allocs","","Returns the total number of `alloc` calls.",9,[[]]],[11,"num_allocs_filter","","Returns the filtered number of `alloc` calls.",9,[[["resultfilter",4]]]],[11,"num_deallocs","","Returns the total number of `dealloc` calls.",9,[[]]],[11,"num_grows","","Returns the total number of `grow` calls.",9,[[]]],[11,"num_grows_filter","","Returns the filtered number of `grow` calls.",9,[[["resultfilter",4]]]],[11,"num_shrinks","","Returns the total number of `shrink` calls.",9,[[]]],[11,"num_shrinks_filter","","Returns the filtered number of `shrink` calls.",9,[[["resultfilter",4]]]],[11,"num_owns","","Returns the total number of `owns` calls.",9,[[]]],[11,"num_owns_filter","","Returns the filtered number of `owns` calls.",9,[[]]],[11,"num_allocs","","Returns the total number of `alloc` calls.",10,[[]]],[11,"num_allocs_filter","","Returns the filtered number of `alloc` calls.",10,[[["resultfilter",4]]]],[11,"num_deallocs","","Returns the total number of `dealloc` calls.",10,[[]]],[11,"num_grows","","Returns the total number of `grow` calls.",10,[[]]],[11,"num_grows_filter","","Returns the filtered number of `grow` calls.",10,[[["resultfilter",4]]]],[11,"num_shrinks","","Returns the total number of `shrink` calls.",10,[[]]],[11,"num_shrinks_filter","","Returns the filtered number of `shrink` calls.",10,[[["resultfilter",4]]]],[11,"num_owns","","Returns the total number of `owns` calls.",10,[[]]],[11,"num_owns_filter","","Returns the filtered number of `owns` calls.",10,[[]]],[8,"CallbackRef","alloc_compose","Backend for the [`Proxy`] allocator.",null,null],[10,"alloc","","Called when [`alloc`] was invoked.",11,[[["allocerr",3],["allocinit",4],["result",4],["memoryblock",3],["layout",3]]]],[10,"dealloc","","Called when [`dealloc`] was invoked.",11,[[["layout",3],["nonnull",3]]]],[10,"grow","","Called when [`grow`] was invoked.",11,[[["nonnull",3],["allocinit",4],["allocerr",3],["result",4],["memoryblock",3],["reallocplacement",4],["layout",3]]]],[10,"shrink","","Called when [`shrink`] was invoked.",11,[[["nonnull",3],["allocerr",3],["result",4],["memoryblock",3],["reallocplacement",4],["layout",3]]]],[10,"owns","","Called when [`owns`] was invoked.",11,[[]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of…",11,[[]]],[8,"Owns","","Trait to determine if a given `MemoryBlock` is owned by an…",null,null],[10,"owns","","Returns if the allocator owns the passed `MemoryBlock`.",12,[[["memoryblock",3]]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","alloc_compose::stats","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"alloc","","",7,[[["allocerr",3],["allocinit",4],["result",4],["memoryblock",3],["layout",3]]]],[11,"dealloc","","",7,[[["layout",3],["nonnull",3]]]],[11,"grow","","",7,[[["nonnull",3],["allocinit",4],["allocerr",3],["result",4],["memoryblock",3],["reallocplacement",4],["layout",3]]]],[11,"shrink","","",7,[[["nonnull",3],["allocerr",3],["result",4],["memoryblock",3],["reallocplacement",4],["layout",3]]]],[11,"owns","","",7,[[]]],[11,"alloc","","",8,[[["allocerr",3],["allocinit",4],["result",4],["memoryblock",3],["layout",3]]]],[11,"dealloc","","",8,[[["layout",3],["nonnull",3]]]],[11,"grow","","",8,[[["nonnull",3],["allocinit",4],["allocerr",3],["result",4],["memoryblock",3],["reallocplacement",4],["layout",3]]]],[11,"shrink","","",8,[[["nonnull",3],["allocerr",3],["result",4],["memoryblock",3],["reallocplacement",4],["layout",3]]]],[11,"owns","","",8,[[]]],[11,"alloc","","",9,[[["allocerr",3],["allocinit",4],["result",4],["memoryblock",3],["layout",3]]]],[11,"dealloc","","",9,[[["layout",3],["nonnull",3]]]],[11,"grow","","",9,[[["nonnull",3],["allocinit",4],["allocerr",3],["result",4],["memoryblock",3],["reallocplacement",4],["layout",3]]]],[11,"shrink","","",9,[[["nonnull",3],["allocerr",3],["result",4],["memoryblock",3],["reallocplacement",4],["layout",3]]]],[11,"owns","","",9,[[]]],[11,"alloc","","",10,[[["allocerr",3],["allocinit",4],["result",4],["memoryblock",3],["layout",3]]]],[11,"dealloc","","",10,[[["layout",3],["nonnull",3]]]],[11,"grow","","",10,[[["nonnull",3],["allocinit",4],["allocerr",3],["result",4],["memoryblock",3],["reallocplacement",4],["layout",3]]]],[11,"shrink","","",10,[[["nonnull",3],["allocerr",3],["result",4],["memoryblock",3],["reallocplacement",4],["layout",3]]]],[11,"owns","","",10,[[]]],[11,"owns","alloc_compose","",0,[[["memoryblock",3]]]],[11,"owns","","Will always return `false.",13,[[["memoryblock",3]]]],[11,"owns","","",1,[[["memoryblock",3]]]],[11,"owns","","",3,[[["memoryblock",3]]]],[11,"owns","","",2,[[["memoryblock",3]]]],[11,"from","alloc_compose::stats","",4,[[["allocinit",4]]]],[11,"from","","",4,[[["allocinit",4],["option",4]]]],[11,"from","","",5,[[["reallocplacement",4]]]],[11,"from","","",5,[[["option",4],["reallocplacement",4]]]],[11,"fmt","alloc_compose","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","alloc_compose::stats","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"eq","alloc_compose","",1,[[["proxy",3]]]],[11,"ne","","",1,[[["proxy",3]]]],[11,"eq","alloc_compose::stats","",7,[[["counter",3]]]],[11,"ne","","",7,[[["counter",3]]]],[11,"eq","","",7,[[["atomiccounter",3]]]],[11,"eq","","",8,[[]]],[11,"eq","","",8,[[["counter",3]]]],[11,"eq","","",4,[[["allocinitfilter",4]]]],[11,"eq","","",5,[[["reallocplacementfilter",4]]]],[11,"eq","","",6,[[["resultfilter",4]]]],[11,"eq","","",9,[[["filteredcounter",3]]]],[11,"ne","","",9,[[["filteredcounter",3]]]],[11,"eq","","",9,[[["filteredatomiccounter",3]]]],[11,"eq","","",10,[[]]],[11,"eq","","",10,[[["filteredcounter",3]]]],[11,"cmp","alloc_compose","",1,[[["proxy",3]],["ordering",4]]],[11,"partial_cmp","","",1,[[["proxy",3]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["proxy",3]]]],[11,"le","","",1,[[["proxy",3]]]],[11,"gt","","",1,[[["proxy",3]]]],[11,"ge","","",1,[[["proxy",3]]]],[11,"hash","","",1,[[]]],[11,"clone","","",0,[[],["fallbackalloc",3]]],[11,"clone","","",13,[[],["nullalloc",3]]],[11,"clone","","",1,[[],["proxy",3]]],[11,"clone","","",2,[[],["segregatealloc",3]]],[11,"clone","alloc_compose::stats","",4,[[],["allocinitfilter",4]]],[11,"clone","","",5,[[],["reallocplacementfilter",4]]],[11,"clone","","",6,[[],["resultfilter",4]]],[11,"default","","",7,[[],["counter",3]]],[11,"default","","",8,[[],["atomiccounter",3]]],[11,"default","","",9,[[],["filteredcounter",3]]],[11,"default","","",10,[[],["filteredatomiccounter",3]]],[11,"alloc","alloc_compose","",0,[[["allocinit",4],["layout",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"dealloc","","",0,[[["layout",3],["nonnull",3]]]],[11,"grow","","",0,[[["nonnull",3],["allocinit",4],["reallocplacement",4],["layout",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"shrink","","",0,[[["layout",3],["reallocplacement",4],["nonnull",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"alloc","","Will always return `Err(AllocErr)`.",13,[[["allocinit",4],["layout",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"dealloc","","Must not be called, as `alloc` always fails.",13,[[["layout",3],["nonnull",3]]]],[11,"grow","","Must not be called, as `alloc` always fails.",13,[[["nonnull",3],["allocinit",4],["reallocplacement",4],["layout",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"shrink","","Must not be called, as `alloc` always fails.",13,[[["layout",3],["reallocplacement",4],["nonnull",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"alloc","","",1,[[["allocinit",4],["layout",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"dealloc","","",1,[[["layout",3],["nonnull",3]]]],[11,"grow","","",1,[[["nonnull",3],["allocinit",4],["reallocplacement",4],["layout",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"shrink","","",1,[[["layout",3],["reallocplacement",4],["nonnull",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"alloc","","",3,[[["allocinit",4],["layout",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"dealloc","","",3,[[["layout",3],["nonnull",3]]]],[11,"grow","","",3,[[["nonnull",3],["allocinit",4],["reallocplacement",4],["layout",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"shrink","","",3,[[["layout",3],["reallocplacement",4],["nonnull",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"alloc","","",2,[[["allocinit",4],["layout",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"dealloc","","",2,[[["layout",3],["nonnull",3]]]],[11,"grow","","",2,[[["nonnull",3],["allocinit",4],["reallocplacement",4],["layout",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"shrink","","",2,[[["layout",3],["reallocplacement",4],["nonnull",3]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of…",11,[[]]]],"p":[[3,"FallbackAlloc"],[3,"Proxy"],[3,"SegregateAlloc"],[3,"Region"],[4,"AllocInitFilter"],[4,"ReallocPlacementFilter"],[4,"ResultFilter"],[3,"Counter"],[3,"AtomicCounter"],[3,"FilteredCounter"],[3,"FilteredAtomicCounter"],[8,"CallbackRef"],[8,"Owns"],[3,"NullAlloc"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);