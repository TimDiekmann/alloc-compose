var searchIndex={};
searchIndex["alloc_compose"] = {"doc":"Composable allocator structures for plugging together more…","i":[[3,"FallbackAlloc","alloc_compose","An allocator equivalent of an \"or\" operator in algebra.",null,null],[12,"primary","","The primary allocator",0,null],[12,"fallback","","The fallback allocator",0,null],[3,"NullAlloc","","An emphatically empty implementation of `AllocRef`.",null,null],[3,"SegregateAlloc","","Dispatches calls to `AllocRef` between two allocators…",null,null],[12,"small","","",1,null],[12,"large","","",1,null],[8,"Owns","","Trait to determine if a given `MemoryBlock` is owned by an…",null,null],[10,"owns","","Returns if the allocator owns the passed `MemoryBlock`.",2,[[["memoryblock",3]]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"owns","","",0,[[["memoryblock",3]]]],[11,"owns","","",3,[[["memoryblock",3]]]],[11,"owns","","",1,[[["memoryblock",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[],["fallbackalloc",3]]],[11,"clone","","",3,[[],["nullalloc",3]]],[11,"clone","","",1,[[],["segregatealloc",3]]],[11,"alloc","","",0,[[["layout",3],["allocinit",4]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"dealloc","","",0,[[["memoryblock",3]]]],[11,"grow","","",0,[[["memoryblock",3],["allocinit",4],["reallocplacement",4]],[["allocerr",3],["result",4]]]],[11,"shrink","","",0,[[["memoryblock",3],["reallocplacement",4]],[["allocerr",3],["result",4]]]],[11,"alloc","","",3,[[["layout",3],["allocinit",4]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"dealloc","","",3,[[["memoryblock",3]]]],[11,"grow","","",3,[[["memoryblock",3],["allocinit",4],["reallocplacement",4]],[["allocerr",3],["result",4]]]],[11,"shrink","","",3,[[["memoryblock",3],["reallocplacement",4]],[["allocerr",3],["result",4]]]],[11,"alloc","","",1,[[["layout",3],["allocinit",4]],[["allocerr",3],["memoryblock",3],["result",4]]]],[11,"dealloc","","",1,[[["memoryblock",3]]]],[11,"grow","","",1,[[["memoryblock",3],["allocinit",4],["reallocplacement",4]],[["allocerr",3],["result",4]]]],[11,"shrink","","",1,[[["memoryblock",3],["reallocplacement",4]],[["allocerr",3],["result",4]]]]],"p":[[3,"FallbackAlloc"],[3,"SegregateAlloc"],[8,"Owns"],[3,"NullAlloc"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);