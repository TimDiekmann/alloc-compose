var searchIndex = JSON.parse('{\
"alloc_compose":{"doc":"Test Status Coverage Status Docs master Docs.rs Crates.io…","i":[[0,"region","alloc_compose","",null,null],[0,"raw","alloc_compose::region","Region implementations which are not bound by a lifetime.",null,null],[3,"RawRegion","alloc_compose::region::raw","",null,null],[11,"new","","Creates a new region from the given memory block.",0,[[["nonnull",3]]]],[3,"RawSharedRegion","","",null,null],[11,"new","","Creates a new region from the given memory block.",1,[[["nonnull",3]]]],[3,"RawIntrusiveRegion","","",null,null],[11,"new","","Creates a new region from the given memory block.",2,[[["nonnull",3]]]],[3,"Region","alloc_compose::region","A stack allocator over an user-defined region of memory.",null,null],[11,"new","","Creates a new region from the given memory block.",3,[[]]],[3,"SharedRegion","","",null,null],[11,"new","","Creates a new region from the given memory block.",4,[[]]],[3,"IntrusiveRegion","","",null,null],[11,"new","","Creates a new region from the given memory block.",5,[[]]],[3,"Null","alloc_compose","An emphatically empty implementation of `AllocRef`.",null,null],[8,"AllocAll","","",null,null],[10,"allocate_all","","Attempts to allocate all of the memory the allocator can…",6,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"allocate_all_zeroed","","Behaves like `alloc_all`, but also ensures that the…",6,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[10,"deallocate_all","","Deallocates all the memory the allocator had allocated.",6,[[]]],[10,"capacity","","Returns the total capacity available in this allocator.",6,[[]]],[10,"capacity_left","","Returns the free capacity left for allocating.",6,[[]]],[11,"is_empty","","Returns if the allocator is currently not holding memory.",6,[[]]],[11,"is_full","","Returns if the allocator has no more capacity left.",6,[[]]],[8,"ReallocateInPlace","","",null,null],[10,"grow_in_place","","Attempts to extend the memory block.",7,[[["layout",3],["nonnull",3]],[["allocerror",3],["result",4]]]],[10,"grow_in_place_zeroed","","Behaves like `grow_in_place`, but also ensures that the…",7,[[["layout",3],["nonnull",3]],[["allocerror",3],["result",4]]]],[10,"shrink_in_place","","Attempts to shrink the memory block.",7,[[["layout",3],["nonnull",3]],[["allocerror",3],["result",4]]]],[8,"Owns","","Trait to determine if a given memory block is owned by an…",null,null],[10,"owns","","Returns if the allocator owns the passed memory.",8,[[["nonnull",3]]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"from","alloc_compose::region::raw","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","alloc_compose::region","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"allocate_all","alloc_compose","",9,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"allocate_all_zeroed","","",9,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate_all","","",9,[[]]],[11,"capacity","","",9,[[]]],[11,"capacity_left","","",9,[[]]],[11,"allocate_all","alloc_compose::region::raw","",0,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate_all","","",0,[[]]],[11,"capacity","","",0,[[]]],[11,"capacity_left","","",0,[[]]],[11,"allocate_all","","",1,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate_all","","",1,[[]]],[11,"capacity","","",1,[[]]],[11,"capacity_left","","",1,[[]]],[11,"allocate_all","","",2,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate_all","","",2,[[]]],[11,"capacity","","",2,[[]]],[11,"capacity_left","","",2,[[]]],[11,"allocate_all","alloc_compose::region","",3,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"allocate_all_zeroed","","",3,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate_all","","",3,[[]]],[11,"capacity","","",3,[[]]],[11,"capacity_left","","",3,[[]]],[11,"allocate_all","","",4,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"allocate_all_zeroed","","",4,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate_all","","",4,[[]]],[11,"capacity","","",4,[[]]],[11,"capacity_left","","",4,[[]]],[11,"allocate_all","","",5,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"allocate_all_zeroed","","",5,[[],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"deallocate_all","","",5,[[]]],[11,"capacity","","",5,[[]]],[11,"capacity_left","","",5,[[]]],[11,"grow_in_place","alloc_compose","Must not be called, as allocation always fails.",9,[[["layout",3],["nonnull",3]],[["allocerror",3],["result",4]]]],[11,"grow_in_place_zeroed","","Must not be called, as allocation always fails.",9,[[["layout",3],["nonnull",3]],[["allocerror",3],["result",4]]]],[11,"shrink_in_place","","Must not be called, as allocation always fails.",9,[[["layout",3],["nonnull",3]],[["allocerror",3],["result",4]]]],[11,"owns","","Will always return `false.",9,[[["nonnull",3]]]],[11,"owns","alloc_compose::region::raw","",0,[[["nonnull",3]]]],[11,"owns","","",1,[[["nonnull",3]]]],[11,"owns","","",2,[[["nonnull",3]]]],[11,"owns","alloc_compose::region","",3,[[["nonnull",3]]]],[11,"owns","","",4,[[["nonnull",3]]]],[11,"owns","","",5,[[["nonnull",3]]]],[11,"fmt","alloc_compose","",9,[[["formatter",3]],["result",6]]],[11,"fmt","alloc_compose::region::raw","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[]]],[11,"eq","","",2,[[]]],[11,"eq","alloc_compose::region","",3,[[]]],[11,"eq","","",3,[[["rawregion",3]]]],[11,"eq","alloc_compose::region::raw","",0,[[["region",3]]]],[11,"eq","alloc_compose::region","",4,[[]]],[11,"eq","","",4,[[["rawsharedregion",3]]]],[11,"eq","alloc_compose::region::raw","",1,[[["sharedregion",3]]]],[11,"eq","alloc_compose::region","",5,[[]]],[11,"eq","","",5,[[["rawintrusiveregion",3]]]],[11,"eq","alloc_compose::region::raw","",2,[[["intrusiveregion",3]]]],[11,"clone","alloc_compose","",9,[[],["null",3]]],[11,"clone","alloc_compose::region::raw","",1,[[],["rawsharedregion",3]]],[11,"clone","","",2,[[],["rawintrusiveregion",3]]],[11,"clone","alloc_compose::region","",4,[[],["sharedregion",3]]],[11,"clone","","",5,[[],["intrusiveregion",3]]],[11,"alloc","alloc_compose","Will always return `Err(AllocErr)`.",9,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"alloc_zeroed","","Will always return `Err(AllocErr)`.",9,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"dealloc","","Must not be called, as allocation always fails.",9,[[["layout",3],["nonnull",3]]]],[11,"grow","","Must not be called, as allocation always fails.",9,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"grow_zeroed","","Must not be called, as allocation always fails.",9,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"shrink","","Must not be called, as allocation always fails.",9,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"alloc","alloc_compose::region::raw","",0,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"dealloc","","",0,[[["layout",3],["nonnull",3]]]],[11,"alloc","","",1,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"dealloc","","",1,[[["layout",3],["nonnull",3]]]],[11,"alloc","","",2,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"dealloc","","",2,[[["layout",3],["nonnull",3]]]],[11,"alloc","alloc_compose::region","",3,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"dealloc","","",3,[[["layout",3],["nonnull",3]]]],[11,"grow","","",3,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"grow_zeroed","","",3,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"shrink","","",3,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"alloc","","",4,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"dealloc","","",4,[[["layout",3],["nonnull",3]]]],[11,"grow","","",4,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"grow_zeroed","","",4,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"shrink","","",4,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"alloc","","",5,[[["layout",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"dealloc","","",5,[[["layout",3],["nonnull",3]]]],[11,"grow","","",5,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"grow_zeroed","","",5,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]],[11,"shrink","","",5,[[["layout",3],["nonnull",3]],[["nonnull",3],["result",4],["allocerror",3]]]]],"p":[[3,"RawRegion"],[3,"RawSharedRegion"],[3,"RawIntrusiveRegion"],[3,"Region"],[3,"SharedRegion"],[3,"IntrusiveRegion"],[8,"AllocAll"],[8,"ReallocateInPlace"],[8,"Owns"],[3,"Null"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);